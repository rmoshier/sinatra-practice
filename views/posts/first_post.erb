<h1> Ada: Month 1 </h1>

<p> At the beginning of September I started going to school full-time at the Ada Developers Academy.
  Over the past four weeks my mind has grown in many unexpected and beautiful ways.
  I am excited for this growth to continue, and to chronicle the experience here. </p>

<p> Today, I want to explore the idea of attachment in software development.
  Since starting down this career path, I’ve found myself attached to several ideas
  like what a software developer should be like, what my code should look like,
  and how I should be processing and coping with a career transition to a challenging field.
  My attachment to these ideas is leading to some unnecessary suffering,
  and I want to challenge myself to let these preconceived ideas go. </p>

<p> For example, this week we worked on a project where we were recreating a Scrabble game in Ruby.
  After working on the project for a few minutes, I became stuck on creating one specific method. Here is my code:</p>

<code>
  <pre>
    def self.highest_score_from(array_of_words) #returns the word in the array with the highest score.
      array_of_words = []
      array_of_words.max_by { |a| a.score }
    end
  </pre>
</code>
<!-- <img src="/ss1.png" alt="bad code"> -->
<p>
  I felt really good about the logic in the third line, but I was having trouble figuring out what to do next.
  After checking in with a TA, she suggested that we go about writing that method in a different way altogether,
  and that I should delete my code in line 3. I was not happy with this suggestion.
  After struggling with creating the logic on the third line for several minutes,
  I was resistant to dispose of it so quickly. However, even though I was excited about the logic I created,
  it wasn’t the right logic for the problem. Only after letting go of my previous code was I able to move forward and complete the method:
</p>

<code>
  <pre>
    def self.highest_score_from(array_of_words)
      h = {}
      array_of_words.each { |word| h[word] = score(word) }
      max_value = h.values.max
      highest_word_score_array = []
      h.each do |k,v|
        if v == max_value
          highest_word_score_array << k
        end
      end
      shortest_word = count_words(highest_word_score_array)
      return shortest_word
    end
  </pre>
</code>
<!-- <img src="/ss2.png" alt="better code"> -->
<p> Building software ought to be a fluid process.
  Attachment to the present does not leave room for future improvement and growth.
  I hope to keep this thought on the forefront of my mind as I continue learning. 
</p>
